/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum ItemLayout {
  default = 'default',
  tile = 'tile',
  list = 'list'
}
export const enum ItemSort {
  default = 'default',
  initial = 'initial',
  openNumber = 'openNumber',
  lastOpen = 'lastOpen'
}
export const enum ItemShowOnly {
  default = 'default',
  file = 'file',
  folder = 'folder'
}
/**
 * 获取图标
*/
export function getFileIcon(path: string): string | null
/**
 * 搜索路径
*/
export function searchPath(path: string): string | null
/**
 * 解析快捷方式
*/
export function getShortcutFileInfo(path: string): Record<string, string> | null
/**
 * 运行
*/
export function shellExecute(operation: string, file: string, params: string, startLocation?: string | undefined | null): void
/**
 * 运行系统项目
*/
export function systemItemExecute(target: string, params?: string | undefined | null): void
/**
 * 打开文件所在位置
*/
export function openFileLocation(path: string): void
/**
 * 资源管理器菜单
*/
export function explorerContextMenu(window: number, path: string, x: number, y: number): void
/**
 * 获取环境变量
*/
export function getEnvByName(name: string): string | null
/**
 * 是否是全屏模式
*/
export function isFullscreen(): boolean
/**
 * 切换英文输入法
*/
export function switchEnglish(window: number): void
/**
 * 创建鼠标HOOK
*/
export function createMouseHook(callback: (...args: any[]) => any): void
/**
 * 启用鼠标HOOK
*/
export function enableMouseHook(): void
/**
 * 禁用鼠标HOOK
*/
export function disableMouseHook(): void
/**
 * 获取鼠标点击的窗口ClassName
*/
export function getCursorPosWindowClassName(): string
/**
 * 获取剪切板文件列表
*/
export function getClipboardFileList(): Array<string>
/**
 * 剪切板是否存在BITMAP
*/
export function clipboardHasBitmap(): boolean
/**
 * 获取剪切板BITMAP的BASE64
*/
export function getClipboardBitmapBase64(): string | null
/**
 * 清空回收站
*/
export function emptyRecycleBin(window: number): void
/**
 * 去掉窗口动画
*/
export function removeWindowAnimation(window: number): void
/**
 * 获取APPX列表
*/
export function getAppxList(): Array<Record<string, string>>
export class ClassificationData {
  icon?: string
  associateFolderPath?: string
  associateFolderHiddenItems?: string
  itemLayout: ItemLayout
  itemSort: ItemSort
  itemColumnNumber?: number
  itemIconSize?: number
  itemShowOnly: ItemShowOnly
  fixed: boolean
  aggregateItemCount: number
  excludeSearch: boolean
}
export class Classification {
  id: number
  parentId?: number
  name?: string
  type: number
  data: string
  shortcutKey?: string
  globalShortcutKey: boolean
  order: number
  constructor()
  getChildList(parentId: number, dataSource: DataSource): Array<Classification>
}
export class DataSource {
  constructor(path: string)
  insertClassification(parentId: number | undefined | null, name: string, shortcutKey: string | undefined | null, globalShortcutKey: boolean, data: string, type?: number | undefined | null): Classification | null
  updateClassification(id: number, name: string, shortcutKey: string | undefined | null, globalShortcutKey: boolean, data: string, type?: number | undefined | null): boolean
  getClassificationCount(): number
  getClassification(parentId?: number | undefined | null): Array<Classification>
  getClassificationById(id: number): Classification | null
  /** 查询最大序号 */
  getClassificationMaxOrder(parentId?: number | undefined | null): number
  updateClassificationData(id: number, data: string): number
  hasChildClassification(parentId?: number | undefined | null): boolean
  /** 重新排序 */
  reorderClassification(parentId?: number | undefined | null): void
}
